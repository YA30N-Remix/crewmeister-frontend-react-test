import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import absencesService from "../../services/absencesService";
import { filData } from "../../utils/models";


const initialState = {
  absences: [],
  loading: false,
  error: false,
};

/**
 * Thunk to get absences list in rudux
 * Asunc increment action creator
 * The function below is called a thunk and allows us to perform async logic. It
 * can be dispatched like a regular action: `dispatch(getAbsencesList({startDate, endDate, type}}))`. This
 * will call the thunk with the `dispatch` function as the first argument. Async
 * code can then be executed and other actions can be dispatched. Thunks are
 * typically used to make async requests.
 * @param _filData - object of filter data : {stardate, enddate, type}
 */
export const getAbsencesList = createAsyncThunk("getAbsences", async (_filData: filData = new filData()) => {

    //call getAbsences service method
    const res = await absencesService.getAbsences(_filData);
    return res;
});

/**
 * Redux Slice using Redux Toolkit - Toolkit make it easy :) 
 * there are three state which are pending, fulfilled, rejected
 * @fulfilled {number} - returned list of absences
 * @rejected {string} - set error
 * @pending {string} - set loader
 * @returns member 
 */
const absencesSlice = createSlice({
  name: "absencesList",
  initialState,
    // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
     // waiting for get data
    builder.addCase(getAbsencesList.pending, (state, action) => {
      state.loading = true;
    });
    builder.addCase(getAbsencesList.fulfilled, (state, action) => {
      state.loading = false; 
      state.absences = action.payload;
    });
    // some error occurred while loading repository content
    builder.addCase(getAbsencesList.rejected, (state, action) => {
      state.error = true;
    });
  },
});

export const {} =
  absencesSlice.actions;

export default absencesSlice.reducer;
